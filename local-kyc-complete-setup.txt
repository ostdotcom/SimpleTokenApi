Set Up KYC
Nginx conf to run SimpleToken Web and Api
server {
        listen       8080;
        server_name  kyc.developmentost.com;

        location /api/ {
            proxy_pass http://kyc.developmentost.com:4000;
        }

        location / {
            proxy_pass http://kyc.developmentost.com:5000;
        }
    }

Run simpletoken web on port 5000
Run simpletoken api on port 4000

Set Up Kyc whitelisting process
	STEP 1: Use OpenStPlatfrom code and follow steps for openStSetup
STEP 2: DEPLOY MOCK WHITELIST CONTRACT

git clone SimpleTokenSaleDryRun repository
cd /SimpleTokenSaleDryRun/deploy/scripts
npm install
In different console Start geth using below command

 geth --networkid 2001 --datadir /Users/pankajkeswani/openst-setup/openst-geth-value --port 30301 --rpc --rpcapi eth,net,web3,personal,txpool --rpcport 8545 --rpcaddr 127.0.0.1 --ws --wsport 18545 --wsorigins '*' --wsaddr 127.0.0.1 --etherbase 0xeb416b2bb07c4461d1e5ace99a0192d13c18c801 --mine --minerthreads 1 --targetgaslimit 4700000  --gasprice 0xBA43B7400 --unlock 0xeb416b2bb07c4461d1e5ace99a0192d13c18c801 --password /Users/pankajkeswani/openst-setup/openst-geth-value/sealer-passphrase 2> /Users/pankajkeswani/openst-setup/logs/chain-value.log

In console SimpleTokenSaleDryRun/deploy/scripts set below environment variables
export ST_DEPLOYER_GETH_PROVIDER='http://127.0.0.1:8545'
export ST_DEPLOYER_ADDR=‘0xBD5D1813F8cD94356fd176e9C20B14304D654E24’ - An address which has eth balance
export ST_DEPLOYER_ADDR_PASSPHRASE=‘testtest’


Deploy contract using command 'node deployMockTokenSale.js’

Once contract is deployed successfully take contract address printed on console “Mock Token Sale Contract Deployed: 0x444FCd7De2B20a107f03716E3202854f2953Fe5B”


STEP 3: SETUP PUBLIC OPS AND PRIVATE OPS
git clone SimpleTokenOpsPublicAPI and SimpleTokenOpsPrivateAPI
Run npm install for both repos.
Follow Readme.md files of both repos and export all variables in two different consoles.
Overwrite below Variables in SimpleTokenOpsPublic
export ST_API_BASE_URL='http://kyc.developmentost.com:8080/api'
export ST_GENERIC_ERC20_CONTRACT_ADDRS='["0x444FCd7De2B20a107f03716E3202854f2953Fe5B”]’ - Set contract deployed address
export ST_GENERIC_WHITELIST_CONTRACT_ADDRS='["0x444FCd7De2B20a107f03716E3202854f2953Fe5B"]'
 Overwrite below Variables in SimpleTokenOpsPrivate
export ST_WHITELIST_ACCOUNT_ADDRS='["0xBD5D1813F8cD94356fd176e9C20B14304D654E24”]' - An address which has eth balance
export ST_WHITELIST_ACCOUNT_PASSPHRASE='testtest'
export ST_GENERIC_ERC20_CONTRACT_ADDRS='["0x444FCd7De2B20a107f03716E3202854f2953Fe5B”]’ - Set contract deployed address
export ST_GENERIC_WHITELIST_CONTRACT_ADDRS='["0x444FCd7De2B20a107f03716E3202854f2953Fe5B”]’
Run node servers with command node ./bin/www

STEP 4: SETUP SimpleTokenApi Client
1. For a client set contract address received from Step 2 and whitelister address which has eth balance.
2. Ethereum address of use should be present in your local chain. So create one and use it for user in its KYC to whitelist.
Generate Eth address
a. In node
	Web3 = require('web3’)
	const web3Object = new Web3();
	var newAddress = web3Object.eth.accounts.create(‘any password');